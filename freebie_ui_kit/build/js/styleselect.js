!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.returnExports=t()}(this,function(){var e=document.querySelector.bind(document),t=document.querySelectorAll.bind(document),a={SPACE:32,UP:38,DOWN:40,ENTER:13};NodeList.prototype.forEach||(NodeList.prototype.forEach=Array.prototype.forEach),HTMLCollection.prototype.forEach||(HTMLCollection.prototype.forEach=Array.prototype.forEach),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.webkitMatchesSelector||Element.prototype.oMatchesSelector);var n=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),a};if(n.prototype=window.Event.prototype,window.CustomEvent=n,!(document.documentElement.dataset||Object.getOwnPropertyDescriptor(Element.prototype,"dataset")&&Object.getOwnPropertyDescriptor(Element.prototype,"dataset").get)){var o={enumerable:!0,get:function(){"use strict";var e,t,a,n,o,r,s=this,i=this.attributes,c=i.length,d=function(e){return e.charAt(1).toUpperCase()},l=function(){return this},u=function(e,t){return"undefined"!=typeof t?this.setAttribute(e,t):this.removeAttribute(e)};try{({}).__defineGetter__("test",function(){}),t={}}catch(p){t=document.createElement("div")}for(e=0;e<c;e++)if(r=i[e],r&&r.name&&/^data-\w[\w\-]*$/.test(r.name)){a=r.value,n=r.name,o=n.substr(5).replace(/-./g,d);try{Object.defineProperty(t,o,{enumerable:this.enumerable,get:l.bind(a||""),set:u.bind(s,n)})}catch(f){t[o]=a}}return t}};try{Object.defineProperty(Element.prototype,"dataset",o)}catch(r){o.enumerable=!1,Object.defineProperty(Element.prototype,"dataset",o)}}var s=function(e,t,a){var n=e.parentNode;if(a&&e.matches(t))return!0;for(;n&&n.nodeType&&1===n.nodeType;){if(n.matches(t))return!0;n=n.parentNode}return!1},i=function(){return"ss-xxxx-xxxx-xxxx-xxxx-xxxx".replace(/x/g,function(e){var t=16*Math.random()|0,a="x"==e?t:3&t|8;return a.toString(16)})};return function(o){if(!navigator.userAgent.match(/iPad|iPhone|Android/i)){var r,c=e(o),d=c.children,l=c.selectedIndex,u=i(),p='<div class="style-select" aria-hidden="true" data-ss-uuid="'+u+'">',f=d.length-1;c.setAttribute("data-ss-uuid",u),c.setAttribute("aria-hidden","false");var v,h='<div class="ss-dropdown">';d.forEach(function(e,t){var a=e.textContent,n=e.getAttribute("value")||"",o="ss-option",r="Select Something";t===l&&(v='<div class="ss-selected-option" tabindex="0" data-value="Select Something">'+r+"</div>"),e.disabled&&(o+=" disabled"),h+='<div class="'+o+'" data-value="'+n+'">'+a+"</div>"}),h+="</div>",p+=v+=h+="</div>",c.insertAdjacentHTML("afterend",p);var m=e('.style-select[data-ss-uuid="'+u+'"]'),y=m.querySelectorAll(".ss-option"),E=m.querySelector(".ss-selected-option"),b=function(e,t){m.classList.remove("open"),E.textContent=t,E.dataset.value=e,y.forEach(function(t){t.dataset.value===e?t.classList.add("ticked"):t.classList.remove("ticked")}),c.value=e;var a=new n("change");c.dispatchEvent(a)};y.forEach(function(e,t){var a=y.item(t);a.className.match(/\bdisabled\b/)||(a.addEventListener("click",function(e){var t=e.target,a=t.parentNode.parentNode,n=(a.getAttribute("data-ss-uuid"),t.getAttribute("data-value")),o=t.textContent;b(n,o)}),a.dataset.value===c.value&&(r=t,a.classList.add("ticked"),a.classList.add("highlighted")),a.addEventListener("mouseover",function(e){a.parentNode.childNodes.forEach(function(t,a){t===e.target?(t.classList.add("highlighted"),r=a):t.classList.remove("highlighted")})}))});var g=function(e){t(".style-select").forEach(function(t){t!==e&&t.classList.remove("open")})},x=document.querySelectorAll(".ss-selected-option")[0],L=function(e){e.classList.contains("open")?x.classList.remove("gray"):(x.classList.add("gray"),g(e)),e.classList.toggle("open")},A=e('.style-select[data-ss-uuid="'+u+'"] .ss-selected-option');A.addEventListener("click",function(e){e.preventDefault(),e.stopPropagation(),L(e.target.parentNode)}),A.addEventListener("keydown",function(e){var t=e.target.parentNode;switch(e.keyCode){case a.SPACE:L(t);break;case a.DOWN:case a.UP:t.classList.contains("open")?(e.keyCode===a.UP?0!==r&&(r-=1):r<f&&(r+=1),y.forEach(function(e,t){t===r?e.classList.add("highlighted"):e.classList.remove("highlighted")})):L(t),e.preventDefault(),e.stopPropagation();break;case a.ENTER:var n=A.parentNode.querySelectorAll(".ss-option")[r],o=n.dataset.value,s=n.textContent;b(o,s),e.preventDefault(),e.stopPropagation()}}),e("body").addEventListener("click",function(e){s(e.target,".style-select",!0)||g()})}}});
//# sourceMappingURL=data:application/json;base64,
